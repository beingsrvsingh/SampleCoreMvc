using System;
using System.Collections.Generic;
using System.Linq;
using CoreTemplate.DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Newtonsoft.Json;

namespace CoreTemplate.DAL
{
    /// <summary>
    /// unit of work disposable class to instantiate db context object for each repository
    /// </summary>
    /// <remarks>Author: Dave Digvijay</remarks>
    public class UnitOfWork : IDisposable
    {
        /// <summary>
        /// Guidestone database context
        /// </summary>
        private CoreTemplateContext objContext;

        /// <summary>
        /// This field is used to check whether disposed
        /// </summary>
        private bool disposed = false;

        /// <summary>
        /// Initializes a new instance of the UnitOfWork class with database context object
        /// </summary>
        /// <remarks>Author: Dave Digvijay</remarks>
        public UnitOfWork()
        {
            this.objContext = new CoreTemplateContext();
            //this.objContext.Configuration.ProxyCreationEnabled = false;
            //this.objContext.Configuration.LazyLoadingEnabled = true;
        }

        /// <summary>
        /// This method is used to save changes into database.
        /// </summary>
        /// <remarks>Author: Dave Digvijay</remarks>
        public void Save(bool trackChanges = false, string createdBy = "", DateTime? createdOn = null, int recordId = 0)
        {
            List<AuditEntry> auditEntries = null;
            if (trackChanges)
            {
                auditEntries = OnBeforeSaveChanges(recordId, createdBy, createdOn);
            }

            this.objContext.SaveChanges();

            if (trackChanges)
            {
                OnAfterSaveChanges(auditEntries);
            }
        }

        /// <summary>
        /// This method is used to dispose context object
        /// </summary>
        /// <remarks>Author: Dave Digvijay</remarks>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// This method is used to dispose
        /// </summary>
        /// <remarks>Author: Dave Digvijay</remarks>
        /// <param name="disposing">expression of filter query, orderBy=>function for orderBy,includeProperties=>string values of properties</param>
        protected virtual void Dispose(bool disposing)
        {
            ////if (!this._disposed)
            ////{
            ////    if (disposing)
            ////    {
            ////        this._objContext.Dispose();
            ////    }
            ////}
            ////this._disposed = true;
        }

        private List<AuditEntry> OnBeforeSaveChanges(int recordId, string createdBy, DateTime? createdOn)
        {
            this.objContext.ChangeTracker.DetectChanges();
            this.objContext.ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in this.objContext.ChangeTracker.Entries())
            {
                //if (entry.Entity is AuditLog || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                  //  continue;

                var auditEntry = new AuditEntry(entry);
                auditEntry.TableName = entry.Metadata.Relational().TableName;
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;

                    if (propertyName == "CreatedOn" || propertyName == "ModifiedOn" || propertyName == "CreatedBy" || propertyName == "ModifiedBy")
                    {
                        continue;
                    }

                    if (property.Metadata.IsPrimaryKey())
                    {
                        if (recordId == 0)
                        {
                            auditEntry.KeyValues = property.CurrentValue.ToString();
                            continue;
                        }
                        else
                        {
                            auditEntry.KeyValues = recordId.ToString();
                            continue;
                        }
                    }

                    auditEntry.CreatedOn = createdOn.HasValue ? createdOn.Value : DateTime.Now;
                    auditEntry.CreatedBy = createdBy;
                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.Action = EntityState.Added.ToString();
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.Action = EntityState.Deleted.ToString();
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.Action = EntityState.Modified.ToString();
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                if (auditEntry.OldValues.Count > 0 || auditEntry.NewValues.Count > 0)
                {
                    //this.objContext.AuditLog.Add(auditEntry.ToAudit());
                }
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private int OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return 0;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues = prop.CurrentValue.ToString();
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                //this.objContext.AuditLog.Add(auditEntry.ToAudit());
            }

            return this.objContext.SaveChanges();
        }
    }

    public class AuditEntry
    {
        public AuditEntry(EntityEntry entry)
        {
            Entry = entry;
        }

        public EntityEntry Entry { get; }
        public string TableName { get; set; }
        public string KeyValues { get; set; }
        public string Action { get; set; }
        public DateTime CreatedOn { get; set; }
        public string CreatedBy { get; set; }
        public Dictionary<string, object> OldValues { get; } = new Dictionary<string, object>();
        public Dictionary<string, object> NewValues { get; } = new Dictionary<string, object>();
        public List<PropertyEntry> TemporaryProperties { get; } = new List<PropertyEntry>();

        public bool HasTemporaryProperties => TemporaryProperties.Any();

        //public AuditLog ToAudit()
        //{
        //    var audit = new AuditLog();
        //    audit.TableName = TableName;
        //    audit.Action = Action;
        //    audit.CreatedOn = CreatedOn;
        //    audit.CreatedBy = CreatedBy;
        //    audit.KeyValues = KeyValues;
        //    audit.OldValues = OldValues.Count == 0 ? null : JsonConvert.SerializeObject(OldValues);
        //    audit.NewValues = NewValues.Count == 0 ? null : JsonConvert.SerializeObject(NewValues);
        //    return audit;
        //}
    }
}
